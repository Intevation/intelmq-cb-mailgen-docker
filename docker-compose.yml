version: "3"
services:
    redis:
        image: redis:latest
        container_name: intelmq-redis
        volumes:
            - ./redis:/usr/local/etc/redis
        command:
            - redis-server
            - /usr/local/etc/redis/redis.conf
        restart: always
        networks:
            - intelmq
    intelmq:
        image: intelmq
        container_name: intelmq
        build:
            context: .
            dockerfile: intelmq/Dockerfile
            args:
                USE_CERTBUND: $USE_CERTBUND
        restart: always
        depends_on:
            - redis
            - database
        environment:
            INTELMQ_SOURCE_PIPELINE_HOST: redis
            INTELMQ_DESTINATION_PIPELINE_HOST: redis
            INTELMQ_REDIS_CACHE_HOST: redis
            USE_CERTBUND: $USE_CERTBUND
        volumes:
            - $DEV_CERTBUND_RULES:/opt/rules
            - $DEV_CERTBUND_FORMATS:/opt/formats
            - $DEV_CERTBUND_TEMPLATES:/opt/templates
        networks:
            - intelmq
    fody:
        image: intelmq-fody
        container_name: intelmq-fody
        build:
            context: .
            dockerfile: fody/Dockerfile
        restart: always
        depends_on:
            - fody-backend
        networks:
            - intelmq
    fody-backend:
        image: intelmq-fody-backend
        container_name: intelmq-fody-backend
        build:
            context: .
            dockerfile: fody-backend/Dockerfile
        restart: always
        volumes:
            - ./fody-backend/conf:/opt/conf
        depends_on:
            - database
        environment:
            EVENTDB_SERVE_CONF_FILE: "/opt/conf/eventdb.conf"
            CONTACTDB_SERVE_CONF_FILE: "/opt/conf/contactdb.conf"
            TICKETS_SERVE_CONF_FILE: "/opt/conf/ticketdb.conf"
        networks:
            - intelmq
        command: ["wait-for-it.sh", "database:5432", "-t", "0", "-s", "--", "hug", "-f", "./intelmq_fody_backend/serve.py", "-p", "8002"]
    database:
        image: intelmq-database
        container_name: intelmq-database
        build:
            context: .
            dockerfile: database/Dockerfile
        restart: always
        volumes:
          - ./database/init:/docker-entrypoint-initdb.d
        environment:
            POSTGRES_PASSWORD: secret
        ports:
            - 1338:5432
        networks:
            - intelmq
        command:
            - "postgres"
            - "-c"
            - "logging_collector=on"
            - "-c"
            - "log_destination=stderr"
            - "-c"
            - "log_directory=/var/log/postgresql/"
            - "-c"
            - "log_statement=all"
    mailgen:
        image: intelmq-mailgen
        container_name: intelmq-mailgen
        build:
            context: .
            dockerfile: mailgen/Dockerfile
        volumes:
          - ./mailgen/init:/opt/init
        restart: always
        depends_on:
            - database
            - dsmtpd
        networks:
            - intelmq
    dsmtpd:
        image: intelmq-dsmtpd
        container_name: intelmq-dsmtpd
        build:
            context: .
            dockerfile: dsmtpd/Dockerfile
        volumes:
            - ../mails:/opt/mails
        ports:
            - 1325:1025
        networks:
            - intelmq
    webinput-csv:
        image: intelmq-webinput-csv-spa
        container_name: intelmq-webinput-csv
        build:
            context: .
            dockerfile: webinput-csv/Dockerfile
        restart: always
        depends_on:
            - webinput-csv-backend
        networks:
            - intelmq
    webinput-csv-backend:
        image: intelmq-webinput-csv-backend
        container_name: intelmq-webinput-csv-backend
        build:
            context: .
            dockerfile: webinput-csv-backend/Dockerfile
        restart: always
        volumes:
            - ./webinput-csv-backend/conf:/opt/conf
        depends_on:
            - intelmq
        networks:
            - intelmq

networks:
    intelmq:
        driver: bridge
